syntax = "proto3";

package droplet;

// Possible statuses for a node
enum NodeStatus {
  UNKNOWN = 0;
  ALIVE = 1;
  HEALTHY = 2;
  UNHEALTHY = 3;
  OFFLINE = 4;
}

// Request to register a new node
message RegisterNodeRequest {
  string node_name = 1;
  string node_ip = 2;
  uint32 node_port = 3;
}

// Response to node registration
message RegisterNodeResponse {
  uint32 node_id = 1;
  bool success = 2;
  string error_message = 3;
}

// Request for node heartbeat
message HeartbeatRequest {
  uint32 node_id = 1;
  NodeStatus status = 2;
}

// Response to heartbeat
message HeartbeatResponse {
  bool acknowledged = 1;
}

message GetWorkerNodeIdRequest {
    string node_name = 1;
}

message GetWorkerNodeIdResponse {
    uint32 node_id = 1;
    string error_message = 2;
}

message NodeInfo {
    uint32 node_id = 1;
    string node_name = 2;
    string node_ip = 3;
    uint32 node_port = 4;
    NodeStatus status = 5;
}

message GetWorkerNodeInfoRequest {
    uint32 node_id = 1;
}

message GetWorkerNodeInfoResponse {
    string node_name = 1;
    string node_ip = 2;
    uint32 node_port = 3;
}

message ColumnInfo {
    string column_name = 1;
    string column_type = 2;
    uint32 column_id = 3;
    uint32 column_index = 4;
}

message InsertTableInfoRequest {
    string table_name = 1;
    uint32 partition_count_per_day = 2;
    repeated ColumnInfo columns = 3;
}

message InsertTableInfoResponse {
    bool success = 1;
    string error_message = 2;
}

message GetTableInfoRequest {
    string table_name = 1;
}

message GetTableInfoResponse {
    repeated ColumnInfo columns = 1;
    uint32 partition_count_per_day = 2;
}

message ReportStorageInfoRequest {
    uint32 node_id = 1;
    uint64 used_disk_size = 2;
}

message ReportStorageInfoResponse {
    bool success= 1;
}

message GetPartitionInfoRequest {
    string table_name = 1;
    uint64 timestamp = 2;
}

message PartitionInfo {
    uint32 partition_id = 1;
    uint32 partition_date = 2;
    uint32 partition_index = 3;
    uint32 node_id = 4;
    string node_name = 5;
    string node_ip = 6;
    uint32 node_port = 7;
    uint64 time_start = 8;
    uint64 time_end = 9;
}

message GetPartitionInfoResponse {
    repeated PartitionInfo partition_infos = 1;
}

message StartSinkPartitionRequest {
    string path = 1;
    uint32 path_id = 2;
    uint32 sinker_id = 3;
    uint32 partition_index = 4;
}

message StartSinkPartitionResponse {
    bool success = 1;
}

message SinkGridSampleRequest {
    uint32 path_id = 1;
    uint32 sinker_id = 2;
    uint32 partition_index = 3;
    bytes grid_sample_bytes = 4;
}

message SinkGridSampleResponse {
    bool success = 1;
    uint32 path_id = 2;
    string error_message = 3;
}

message FinishSinkPartitionRequest {
    uint32 path_id = 1;
    uint32 sinker_id = 2;
    uint32 partition_index = 3;
}

message FinishSinkPartitionResponse {
    bool success = 1;
}